#include "pch.h"
#include <iostream>
#include<stdlib.h>
#include <conio.h>
#include <windows.h>
using namespace std;
using namespace System;
void gotoxy(int x, int y);
void menuSeleccionador();
void nivel1();
void nivel2();
void nivel3();
bool nivel1win = false, nivel1lose = false;
bool nivel2win = false, nivel2lose = false;
bool nivel3win = false, nivel3lose = false;
int matriz[45][64] = {
{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0},
{0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0},
{0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0},
{0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0},
{0,0,3,3,2,3,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,2,3,2,3,2,0,0},
{0,0,2,3,3,3,3,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,2,0,0},
{0,0,0,2,3,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,2,0,0,0},
{0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0},
{0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0},
{0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0},
};
void dibujar_matriz() {
    for (int f = 0; f < 45; f++) {
        gotoxy(5, 3 + f);
        for (int c = 0; c < 64; c++) {
            if (matriz[f][c] == 0) {
                Console::BackgroundColor = ConsoleColor::Black;
                cout << " ";
            }
            if (matriz[f][c] == 1) {
                Console::BackgroundColor = ConsoleColor::Green;
                cout << " ";
            }
            if (matriz[f][c] == 2) {
                Console::BackgroundColor = ConsoleColor::DarkGreen;
                cout << " ";
            }
            if (matriz[f][c] == 3) {
                Console::BackgroundColor = ConsoleColor::DarkYellow;
                cout << " ";
            }
            if (matriz[f][c] == 4) {
                Console::BackgroundColor = ConsoleColor::DarkYellow;
                cout << " ";
            }
        }
        cout << endl;
    }
}
int matriz2[45][64] = {
{1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,1,2,1,2,1,2,1,2},
{2,1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1},
{1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,1,2,1,2,1,2,1,2},
{2,1,2,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{4,4,4,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{4,4,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{4,4,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4,5},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4,5,5},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,5,5,5},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,5,5,5},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
{2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2},
{2,2,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2},
{2,2,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2},
{2,2,2,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2},
{2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2},
{2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2},
{2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2},
{2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,2},
{2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,2,2,2,2},
{2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2},
};
void dibujar_matriz2() { //se dibuja y elije color de la matriz 
    for (int f = 0; f < 45; f++) {
        gotoxy(5, 3 + f);
        for (int c = 0; c < 64; c++) {
            if (matriz2[f][c] == 0) {
                Console::BackgroundColor = ConsoleColor::Black;
                cout << " ";
            }
            if (matriz2[f][c] == 1) {
                Console::BackgroundColor = ConsoleColor::Yellow;
                cout << " ";
            }
            if (matriz2[f][c] == 2) {
                Console::BackgroundColor = ConsoleColor::DarkYellow;
                cout << " ";
            }
            if (matriz2[f][c] == 3) {
                Console::BackgroundColor = ConsoleColor::Green;
                cout << " ";
            }
            if (matriz2[f][c] == 4) {
                Console::BackgroundColor = ConsoleColor::Gray;
                cout << " ";
            }
            if (matriz2[f][c] == 5) {
                Console::BackgroundColor = ConsoleColor::DarkGray;
                cout << " ";
            }
        }
        cout << endl;
    }
}
int matriz3[45][64] = {
{1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3},
{3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3},
{3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
{0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0},
{0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,0,0},
{4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,0},
{0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0},
{0,4,4,5,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,4,4,0,0},
{0,4,0,5,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,5,0,4,0,0},
{0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0},
{0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0},
{0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0},
{0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0}
};
void dibujar_matriz3() { //se dibuja y elije color de la matriz 
    for (int f = 0; f < 45; f++) {
        gotoxy(5, 3 + f);
        for (int c = 0; c < 64; c++) {
            if (matriz3[f][c] == 0) {
                Console::BackgroundColor = ConsoleColor::Black;
                cout << " ";
            }
            if (matriz3[f][c] == 1) {
                Console::BackgroundColor = ConsoleColor::Yellow;
                cout << " ";
            }
            if (matriz3[f][c] == 2) {
                Console::BackgroundColor = ConsoleColor::Green;
                cout << " ";
            }
            if (matriz3[f][c] == 3) {
                Console::BackgroundColor = ConsoleColor::DarkGreen;
                cout << " ";
            }
            if (matriz3[f][c] == 4) {
                Console::BackgroundColor = ConsoleColor::Red;
                cout << " ";
            }
            if (matriz3[f][c] == 5) {
                Console::BackgroundColor = ConsoleColor::DarkYellow;
                cout << " ";
            }
        }
        cout << endl;
    }
}
void borraraliado(int x, int y) {
    gotoxy(x + 1, y); cout << " ";
    gotoxy(x, y + 1); cout << "   ";
    gotoxy(x + 1, y + 2); cout << " ";
}
void creditos() {
    system("cls");
    gotoxy(50, 10);
    Console::ForegroundColor = ConsoleColor::White; cout << "\n\t\t\t\t Creditos a: ";
    gotoxy(50, 12); cout << "* Diego Mora Blas(U20231C069)";
    gotoxy(50, 13); cout << "* Yamil Dionicio (U202119545)";
    gotoxy(50, 16); cout << "(Press any key for continue...)";
    getch();

}
void Instrucciones() {

    system("cls");
    Console::ForegroundColor = ConsoleColor::Cyan; cout << "\t\t\t\t  ___ _  _ ___ _____ ___ _   _  ___ ___ ___ ___  _  _ ___ ___ ";
    Console::ForegroundColor = ConsoleColor::Cyan; cout << "\n\t\t\t\t |_ _| \\| / __|_   _| _ \\ | | |/ __/ __|_ _/ _ \\| \\| | __/ __|";
    Console::ForegroundColor = ConsoleColor::Cyan; cout << "\n\t\t\t\t  | || .` \\__ \\ | | |   / |_| | (_| (__ | | (_) | .` | _|\\__ \\";
    Console::ForegroundColor = ConsoleColor::Cyan; cout << "\n\t\t\t\t |___|_|\\_|___/ |_| |_|_\\\\___/ \\___\\___|___\\___/|_|\\_|___|___/";

    Console::ForegroundColor = ConsoleColor::DarkYellow;
    cout << endl;
    cout << "\n\t\t[1] El objetivo del juego es concienciar sobre el problema del hambre en el  " << endl;
    cout << "\t\t       mundo y la necesidad de tomar medidas para abordarlo " << endl;
    cout << endl;
    cout << "\t\t[2] El juego puede ser jugado individualmente o en grupos(aliados). " << endl;
    cout << endl;
    cout << "\t\t[3] El jugador debe leer los consejos que se le sugieren al momento de jugar " << endl;
    cout << endl;

    cout << endl;
    Console::ForegroundColor = ConsoleColor::White;
    cout << "\t";
    gotoxy(50, 16); cout << "(Press any key for continue...)";
    getch();


}
void Logo_Upc() {
    Console::CursorVisible = false;
    int logo[20][60] = {
{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
{5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,2,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,0,1,1,1,1,2,0,0,1,1,1,2,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,1,1,1,1,2,0,0,0,1,1,1,1,2,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,1,1,1,2,2,0,0,0,0,0,1,1,1,1,2,0,0,0,0,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,1,1,1,1,2,0,0,0,0,0,0,0,1,1,1,1,2,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,1,1,1,1,1,2,0,0,0,0,0,1,1,1,1,2,0,0,0,0,2,1,1,1,1,1,0,0,0,3,3,0,0,3,3,0,0,3,3,3,3,3,3,0,0,3,3,3,3,3,0,4,4,5,5},
{5,5,4,4,0,1,1,1,1,1,1,2,2,0,0,1,1,1,1,1,2,0,0,2,2,1,1,1,1,1,1,0,0,0,3,3,0,0,3,3,0,0,3,3,0,0,3,3,0,0,3,3,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,0,0,0,0,3,3,0,0,3,3,0,0,3,3,3,3,3,3,0,0,3,3,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,3,0,0,3,3,0,0,3,3,0,0,0,0,0,0,3,3,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,3,3,0,0,3,3,0,0,3,3,0,0,0,0,0,0,3,3,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,3,3,0,0,0,0,0,0,3,3,3,3,3,0,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,5,5},
{5,5,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,5},
{5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5},
{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} };

    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 60; j++) {
            Console::SetCursorPosition(j + 30, i + 3);

            if (logo[i][j] == 0) { Console::ForegroundColor = ConsoleColor::Black; cout << char(219); }
            else if (logo[i][j] == 1) { Console::ForegroundColor = ConsoleColor::Red; cout << char(169); }
            else if (logo[i][j] == 2) { Console::ForegroundColor = ConsoleColor::White; cout << char(169); }
            else if (logo[i][j] == 3) { Console::ForegroundColor = ConsoleColor::DarkRed; cout << char(219); }
            else if (logo[i][j] == 4) { Console::ForegroundColor = ConsoleColor::Black; cout << char(219); }
            else if (logo[i][j] == 5) { Console::ForegroundColor = ConsoleColor::Black; cout << char(219); }

        }
        _sleep(100);

    }
    getch();
}
void youlost() {

    Console::ForegroundColor = ConsoleColor::DarkBlue;
    gotoxy(41, 14);
    cout << "   __    __   ____      _   _      ";
    gotoxy(41, 15);
    cout << "   \\ \\  / /  / __ \\    | | | |              ";
    gotoxy(41, 16);
    cout << "    \\ \\/ /  | |  | |   | | | |       ";
    gotoxy(41, 17);
    cout << "     \\  /   | |  | |   | | | |        ";
    gotoxy(41, 18);
    cout << "     / /    | |__| |   | |_| |            ";
    gotoxy(41, 19);
    cout << "    /_/      \\____/     \\___/           ";

    Console::ForegroundColor = ConsoleColor::DarkGreen;
    gotoxy(41, 21);
    cout << " __       ____     _____   _______                               ";
    cout << "|  |     / __ \\   / ____| |__   __|                                  ";
    gotoxy(41, 22);
    cout << "|  |    | |  | |  | (___     | |                               ";
    gotoxy(41, 23);
    cout << "|  |    | |  | |   \___  \\    | |                              ";
    gotoxy(41, 24);
    cout << "|  |__  | |__| |  ____) |    | |                            ";
    gotoxy(41, 25);
    cout << "|_____|  \\____/  |_____/     |_|                               ";
    gotoxy(41, 28); cout << "(Press 'Z' to go to the menu...)";
    Console::ForegroundColor = ConsoleColor::Black;

}
void vidaExtra(int x, int y) {
    gotoxy(x, y); cout << "+1";
}
void aliado1(int x, int y) {
    Console::ForegroundColor = ConsoleColor::Blue;
    gotoxy(x + 1, y); cout << "O";
    gotoxy(x, y + 1); cout << char(218) << char(206) << char(191);
    gotoxy(x + 1, y + 2); cout << "H";
}
void youwin() {
    Console::ForegroundColor = ConsoleColor::DarkBlue;
    gotoxy(41, 14);
    cout << "   __    __   ____      _   _      ";
    gotoxy(41, 15);
    cout << "   \\ \\  / /  / __ \\    | | | |              ";
    gotoxy(41, 16);
    cout << "    \\ \\/ /  | |  | |   | | | |       ";
    gotoxy(41, 17);
    cout << "     \\  /   | |  | |   | | | |        ";
    gotoxy(41, 18);
    cout << "     / /    | |__| |   | |_| |            ";
    gotoxy(41, 19);
    cout << "    /_/      \\____/     \\___/           ";


    Console::ForegroundColor = ConsoleColor::DarkGreen;
    gotoxy(41, 21);
    cout << " __        __     ___       _   _             ";
    gotoxy(41, 22);
    cout << " \\ \\      / /    |_ _|     | \\ | |              ";
    gotoxy(41, 23);
    cout << "  \\ \\ /\\ / /      | |      |  \\\| |             ";
    gotoxy(41, 24);
    cout << "   \\ V  V /       | |      | |\\  |              ";
    gotoxy(41, 25);
    cout << "    \\_/\\_/       |___|     |_| \\_|               ";
    gotoxy(41, 28); cout << "(Press 'Z' for the next level...)";
    Console::ForegroundColor = ConsoleColor::Black;
}
void apartadoInGame(int vidas, int nronda) {
    gotoxy(85, 3);
    Console::ForegroundColor = ConsoleColor::Yellow;
    cout << "||Mision||";
    gotoxy(73, 5);
    Console::ForegroundColor = ConsoleColor::White;
    cout << "Mueve a Raymundo por el mapa";
    gotoxy(73, 6);
    cout << "equivando a los animales mas ferozes del Africa";
    gotoxy(73, 7);
    cout << "y lleva la comida al campamento!!";
    gotoxy(85, 9);
    Console::ForegroundColor = ConsoleColor::Yellow;
    cout << "||Consejos||";
    gotoxy(73, 11);
    Console::ForegroundColor = ConsoleColor::White;
    cout << "Manten presionado la tecla";
    gotoxy(73, 12);
    cout << "para ir mas rapido!!";
    gotoxy(85, 14);
    Console::ForegroundColor = ConsoleColor::Yellow;
    cout << "||Vidas: " << vidas + 1 << "||";
    gotoxy(84, 16);
    cout << "||Ronda: " << nronda + 1 << "/3||";
    Console::ForegroundColor = ConsoleColor::White;
}
void ninosAfricanos(int x, int y) {
    Console::ForegroundColor = ConsoleColor::Red;
    gotoxy(x, y); cout << " @";
    gotoxy(x, y + 1); cout << char(201) << char(219) << char(187);
    gotoxy(x, y + 2); cout << " H";

}
void enemigo1(int x, int y) {
    Console::ForegroundColor = ConsoleColor::Black;
    Console::BackgroundColor = ConsoleColor::Green;
    gotoxy(x + 2, y); cout << "A";
    gotoxy(x + 4, y); cout << "A";
    gotoxy(x + 3, y + 1); cout << "O";
    gotoxy(x, y + 2); cout << "/";
    gotoxy(x + 1, y + 2); cout << char(223) << char(223);
    gotoxy(x + 3, y + 2); cout << "/";
    Console::BackgroundColor = ConsoleColor::Black;
}
void borrarEnemigo1(int x, int y) {
    Console::BackgroundColor = ConsoleColor::Green;
    gotoxy(x + 2, y); cout << " ";
    gotoxy(x + 4, y); cout << " ";
    gotoxy(x + 3, y + 1); cout << " ";
    gotoxy(x, y + 2); cout << " ";
    gotoxy(x + 1, y + 2); cout << "  ";
    gotoxy(x + 3, y + 2); cout << " ";
    Console::BackgroundColor = ConsoleColor::Black;
}
void gotoxy(int x, int y) {
    Console::SetCursorPosition(x, y);
}
void windowsize() {
    Console::SetWindowSize(130, 50);
    Console::CursorVisible = false;
}
void titulo() {
    gotoxy(10, 10);
    cout << " " << char(220) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(220) << "  " << char(219) << char(219) << char(219) << char(220) << char(220) << char(220) << char(220) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(220) << "          " << char(220) << char(219) << "    " << char(219) << char(220) << "    " << char(219) << char(219) << char(219) << "    " << char(219) << char(220) << "  " << char(219) << char(219) << char(219) << char(220) << char(220) << char(220) << char(220) << "       " << char(219) << char(219) << char(219) << "        " << char(220) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << "    " << char(220) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << endl;
    gotoxy(10, 11);
    cout << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << char(223) << char(223) << char(223) << char(219) << char(219) << char(220) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "        " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << char(223) << char(223) << char(223) << char(219) << char(219) << char(220) << " " << char(223) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(220) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << endl;
    gotoxy(10, 12);
    cout << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "        " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(223) << char(219) << char(219) << char(219) << char(223) << char(223) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(223) << "    " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << endl;
    gotoxy(10, 13);
    cout << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "       " << char(220) << char(219) << char(219) << char(219) << char(220) << char(220) << char(220) << char(220) << char(219) << char(219) << char(219) << char(220) << char(220) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "     " << char(219) << char(219) << char(219) << "   " << char(223) << "  " << char(220) << char(219) << char(219) << char(219) << char(220) << char(220) << char(220) << "      " << char(220) << char(219) << char(219) << char(219) << char(220) << char(220) << char(220) << char(220) << char(219) << char(219) << char(223) << endl;
    gotoxy(10, 14);
    cout << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "      " << char(223) << char(223) << char(219) << char(219) << char(219) << char(223) << char(223) << char(223) << char(223) << char(219) << char(219) << char(219) << char(223) << "  " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "     " << char(219) << char(219) << char(219) << "     " << char(223) << char(223) << char(219) << char(219) << char(219) << char(223) << char(223) << char(223) << "     " << char(223) << char(223) << char(219) << char(219) << char(219) << char(223) << char(223) << char(223) << char(223) << char(223) << endl;
    gotoxy(10, 15);
    cout << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "        " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "     " << char(219) << char(219) << char(219) << "       " << char(219) << char(219) << char(219) << "    " << char(219) << char(220) << "  " << char(223) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << endl;
    gotoxy(10, 16);
    cout << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "        " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << " " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "     " << char(219) << char(219) << char(219) << "       " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << endl;
    gotoxy(10, 17);
    cout << " " << char(223) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(223) << "   " << char(223) << char(219) << "   " << char(219) << char(223) << "  " << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(223) << "         " << char(219) << char(219) << char(219) << "    " << char(219) << char(223) << "    " << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(223) << "   " << char(223) << char(219) << "   " << char(219) << char(223) << "     " << char(220) << char(219) << char(219) << char(219) << char(219) << char(223) << "     " << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << "   " << char(219) << char(219) << char(219) << "    " << char(219) << char(219) << char(219) << endl;
}
void logo() {
    Console::ForegroundColor = ConsoleColor::DarkMagenta;
    gotoxy(55, 20);
    cout << "       " << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << endl;
    gotoxy(55, 21);
    cout << "      " << char(219) << char(219) << char(178) << char(178) << char(219) << char(219) << char(219) << char(178) << char(219) << char(219) << endl;
    gotoxy(55, 22);
    cout << char(219) << "    " << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << char(178) << char(219) << char(219) << char(219) << char(219) << endl;
    gotoxy(55, 23);
    cout << char(219) << char(219) << "  " << char(219) << char(219) << char(178) << char(178) << char(178) << char(60) << char(62) << char(178) << char(219) << char(178) << char(219) << char(178) << char(219) << endl;
    gotoxy(55, 24);
    cout << char(219) << char(219) << char(219) << char(178) << char(178) << char(178) << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << char(178) << char(219) << char(178) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 25);
    cout << char(223) << char(219) << char(219) << char(178) << char(178) << char(219) << " " << char(219) << char(219) << char(178) << char(178) << char(178) << char(178) << char(219) << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 26);
    cout << " " << char(223) << char(219) << char(219) << char(223) << "  " << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 27);
    cout << "        " << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 28);
    cout << "        " << char(219) << char(178) << char(178) << char(178) << char(178) << char(219) << " " << char(219) << char(178) << char(178) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 29);
    cout << "        " << char(219) << char(178) << char(178) << char(178) << char(219) << "   " << char(219) << char(178) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 30);
    cout << "        " << char(219) << char(178) << char(178) << char(178) << char(219) << "   " << char(219) << char(178) << char(178) << char(178) << char(219) << endl;
    gotoxy(55, 31);
    cout << "       " << char(219) << char(219) << char(178) << char(219) << char(219) << "   " << char(219) << char(219) << char(178) << char(178) << char(219) << char(219) << endl;
}
void opciones() {
    Console::ForegroundColor = ConsoleColor::White;
    gotoxy(43, 33);
    cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);
    gotoxy(43, 34);
    cout << char(219) << char(219);
    gotoxy(65, 35);
    cout << "JUGAR";
    gotoxy(61, 36);
    cout << "INSTRUCCIONES";
    gotoxy(62, 37);
    cout << "PERSONALIZAR";
    gotoxy(63, 38);
    cout << "ACERCA DE";
    gotoxy(57, 40);
    cout << "(Press 'Z' for select)";
    gotoxy(43, 35);
    cout << char(219) << char(219);
    gotoxy(43, 36);
    cout << char(219) << char(219);
    gotoxy(43, 37);
    cout << char(219) << char(219);
    gotoxy(43, 38);
    cout << char(219) << char(219);
    gotoxy(43, 39);
    cout << char(219) << char(219);
    gotoxy(43, 40);
    cout << char(219) << char(219);
    gotoxy(43, 41);
    cout << char(219) << char(219);
    gotoxy(43, 42);
    cout << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219) << char(219);
    for (int i = 0; i <= 9; i++) {
        gotoxy(90, 33 + i);
        cout << char(219);
        gotoxy(91, 33 + i);
        cout << char(219);
    }

}
void menu() {
    system("cls");
    nivel1lose = false;
    nivel2lose = false;
    nivel3lose = false;
    windowsize();
    logo();
    titulo();
    opciones();
    menuSeleccionador();
}
void mainCharacter(int x, int y) {
    Console::ForegroundColor = ConsoleColor::DarkCyan;
    gotoxy(x + 1, y); cout << "A";
    gotoxy(x, y + 1); cout << "<=>";
    gotoxy(x + 1, y + 2); cout << "O";
    gotoxy(x, y + 3); cout << "[" << char(219) << "]";
    gotoxy(x + 1, y + 4); cout << "H";
}
void borrarCharacter(int x, int y) {
    gotoxy(x + 1, y); cout << "  ";
    gotoxy(x, y + 1); cout << "   ";
    gotoxy(x + 1, y + 2); cout << "  ";
    gotoxy(x, y + 3); cout << "   ";
    gotoxy(x + 1, y + 4); cout << "  ";
}
void personalizar() {
    Console::ForegroundColor = ConsoleColor::DarkGreen;
    gotoxy(31, 5); cout << "                                                 _  _                              ";
    gotoxy(31, 6); cout << " ____     ___   _ __  ___   ___    _ __    __ _ | |(_) ___   __ _   _ __           ";
    gotoxy(31, 7); cout << "|  _ \\   / _ \\ | '__// __| / _ \\  | '_ \\  / _` || || ||_  / / _` | | '__/      ";
    gotoxy(31, 8); cout << "| |_) | /  __/ | |   \\__ \ | (_) | | | | || (_| || || | / / | (_| | | |           ";
    gotoxy(31, 9); cout << "|  __/  \\___|  |_|   |___/ \\___/  |_| |_| \\__,_||_||_|/___\\ \\__,_| |_|        ";
    gotoxy(31, 10); cout << "|_|                                                                                ";
    Console::ForegroundColor = ConsoleColor::Blue;
    gotoxy(30, 15); cout << "   ____     ";
    gotoxy(30, 16); cout << " /_   |    ";
    gotoxy(30, 17); cout << "  |   |     ";
    gotoxy(30, 18); cout << "  |   |      ";
    gotoxy(30, 19); cout << "  |___|      ";
    gotoxy(63, 15); cout << " ________     ";
    gotoxy(63, 16); cout << " \\_____ \\  ";
    gotoxy(63, 17); cout << " /  ____/   ";
    gotoxy(63, 18); cout << "/      \\   ";
    gotoxy(63, 19); cout << "\\_______\\  ";
    gotoxy(96, 15); cout << " ________ ";
    gotoxy(96, 16); cout << " \\_____  \\ ";
    gotoxy(96, 17); cout << "   _(__  < ";
    gotoxy(96, 18); cout << "  /       \\ ";
    gotoxy(96, 19); cout << " /______  /";

    Console::ForegroundColor = ConsoleColor::White;
}
void personalizarMenu() {
    system("cls");
    int menux = 26, menuy = 17;
    int menukb;
    gotoxy(menux, menuy); cout << ">>>";
    while (1) {
        personalizar();
        if (kbhit()) {
            menukb = getch();
            if (menukb == 75) {
                if (menux != 26) {
                    gotoxy(menux, menuy); cout << "   ";
                    menux -= 33;
                    gotoxy(menux, menuy); cout << ">>>";
                }
            }
            if (menukb == 77) {
                if (menux != 92) {
                    gotoxy(menux, menuy); cout << "   ";
                    menux += 33;
                    gotoxy(menux, menuy); cout << ">>>";
                }
            }
            if (menukb == 'Z' || menukb == 'z') {
                if (menux == 26) {
                    nivel1();
                    menu();
                }
                if (menux == 59) {
                    nivel2();
                    menu();
                }
                if (menux == 92) {
                    nivel3();
                    menu();
                }


            }


        }
    }
}
void menuSeleccionador() {
    int menux = 58, menuy = 35;
    int menukb;
    bool jugar = false;
    gotoxy(menux, menuy); cout << ">>>";
    while (1) {
        if (kbhit()) {
            menukb = getch();
            if (menukb == 72) {
                if (menuy != 35) {
                    gotoxy(menux, menuy); cout << "   ";
                    menuy--;
                    gotoxy(menux, menuy); cout << ">>>";
                }
            }
            if (menukb == 80) {
                if (menuy != 38) {
                    gotoxy(menux, menuy); cout << "   ";
                    menuy++;
                    gotoxy(menux, menuy); cout << ">>>";
                }
            }
            if (menukb == 'Z' || menukb == 'z') {
                if (menuy == 35) {
                    jugar = true;
                    break;
                }
                if (menuy == 36) {
                    Instrucciones();
                    system("cls");
                    menu();
                }
                if (menuy == 37) {
                    personalizarMenu();
                    menu();
                }
                if (menuy == 38) {
                    creditos();
                    system("cls");
                    menu();
                }

            }
        }

    }
    if (jugar) {
        nivel1();
        if (nivel1lose) {
            system("cls");
            menu();
        }
        if (nivel1win) {
            system("cls");
            nivel2();
        }
        if (nivel2lose) {
            system("cls");
            menu();
        }
        if (nivel2win) {
            system("cls");
            nivel3();
        }
        if (nivel3lose) {
            system("cls");
            menu();
        }
        if (nivel3win) {
            system("cls");
            menu();
        }
    }
}
void limitesNiveles() {
    Console::SetWindowSize(110, 50);
    int x1 = 4, y1 = 2, x2 = 69, y2 = 48;
    system("cls");
    for (int i = 0; i < 66; i++) {
        gotoxy(x1 + i, y1); cout << char(219);
        gotoxy(x1 + i, y2); cout << char(219);
    }
    for (int i = 0; i < 47; i++) {
        gotoxy(x1, y1 + i); cout << char(219);
        gotoxy(x2, y1 + i); cout << char(219);
    }
}
void nivel1() {
    srand(time(0));
    int speedEnemys[4];
    int Enemy[3];
    int enemyX[4] = { 10,10,10,10 }, enemyY[4] = { 35,25,15,7 };
    int limiteX1 = 5, limiteY1 = 3;
    int limiteX2 = 66, limiteY2 = 43;
    int vida = 2;
    int xP = 34, yP = 42;
    int nrondas = 0;
    bool vidaex = true;
    bool perdiste = false;
    bool ganaste = false;
    limitesNiveles();
    dibujar_matriz();
    while (1) {
        int kb;

        apartadoInGame(vida, nrondas);
        mainCharacter(xP, yP);
        if (kbhit()) {
            kb = getch();
            if (kb == 72) {
                if (yP != limiteY1) {
                    borrarCharacter(xP, yP);
                    yP--;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 75) {
                if (xP != limiteX1) {
                    borrarCharacter(xP, yP);
                    xP--;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 80) {
                if (yP != limiteY2) {
                    borrarCharacter(xP, yP);
                    yP++;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 77) {
                if (xP != limiteX2) {
                    borrarCharacter(xP, yP);
                    xP++;
                    mainCharacter(xP, yP);
                }
            }

        }
        for (int i = 0; i <= 3; i++) {
            speedEnemys[i] = 1.2 + rand() % 1;
        }
        borrarEnemigo1(enemyX[0], enemyY[0]);
        enemyX[0] += speedEnemys[0];
        enemigo1(enemyX[0], enemyY[0]);

        if (enemyX[0] == 64) {
            enemyX[0] = 10;
            borrarEnemigo1(64, enemyY[0]);
        }
        borrarEnemigo1(enemyX[1], enemyY[1]);
        enemyX[1] += speedEnemys[1];
        enemigo1(enemyX[1], enemyY[1]);
        if (enemyX[1] == 64) {
            enemyX[1] = 10;
            borrarEnemigo1(64, enemyY[1]);
        }
        borrarEnemigo1(enemyX[2], enemyY[2]);
        enemyX[2] += speedEnemys[2];
        enemigo1(enemyX[2], enemyY[2]);
        if (enemyX[2] == 64) {
            enemyX[2] = 10;
            borrarEnemigo1(64, enemyY[2]);
        }
        borrarEnemigo1(enemyX[3], enemyY[3]);
        enemyX[3] += speedEnemys[3];
        enemigo1(enemyX[3], enemyY[3]);
        if (enemyX[3] == 64) {
            enemyX[3] = 10;
            borrarEnemigo1(64, enemyY[3]);
        }
        if (xP + 1 == enemyX[0] && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[0] && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP + 4 == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP + 4 == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP + 4 == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;

            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[0] && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP + 2 == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP + 2 == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP + 2 == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP + 4 == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP + 4 == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP + 4 == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP + 2 == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP + 2 == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP + 2 == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP == enemyY[2] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP + 4 == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP + 4 == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP + 4 == enemyY[2] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP + 2 == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP + 2 == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP + 2 == enemyY[2] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        //
        if (xP + 1 == enemyX[3] && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[3] && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP + 4 == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP + 4 == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP + 4 == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[3] && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP + 2 == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP + 2 == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP + 2 == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (yP == 3 || nrondas == 2 && yP == 6) {
            borrarCharacter(xP, yP);
            xP = 34;
            yP = 42;
            nrondas++;
        }
        //
        if (nrondas == 1) {
            aliado1(10, 32);
            if (vidaex == false) borraraliado(10, 32);
        }
        if (vidaex == true) {
            if (xP == 13 && yP + 3 == 33) {
                vidaExtra(8, 31);
                vida++;
                vidaex = false;
                borraraliado(10, 32);
            }
        }
        if (nrondas == 2) {
            ninosAfricanos(31, 4);
            ninosAfricanos(35, 4);
        }
        if (nrondas == 3) {
            system("cls");
            ganaste = true;
            break;

        }
        _sleep(25);
    }
    int pressz;
    if (perdiste) {
        while (1) {
            youlost();
            if (kbhit()) {
                pressz = getch();
                if (pressz == 'Z' || pressz == 'z') {
                    perdiste = false;
                    nivel1lose = true;
                    break;
                }
            }
        }
    }
    if (ganaste) {
        while (1) {
            youwin();
            if (kbhit()) {
                pressz = getch();
                if (pressz == 'Z' || pressz == 'z') {
                    nivel1win = true;
                    ganaste = false;
                    break;
                }
            }
        }
    }
}
void nivel2() {
    srand(time(0));
    int speedEnemys[4];
    int Enemy[3];
    int enemyX[4] = { 5,5,5,5 }, enemyY[4] = { 35,25,15,7 };
    int limiteX1 = 5, limiteY1 = 3;
    int limiteX2 = 66, limiteY2 = 43;
    int vida = 2;
    int xP = 34, yP = 42;
    int nrondas = 0;
    bool vidaex = true, vidaex1 = true;
    bool speedEnemigo = true, speedEnemigo1 = true, speedEnemigo2 = true, speedEnemigo3 = true;
    bool perdiste = false;
    bool ganaste = false;
    limitesNiveles(); \
        for (int i = 0; i <= 3; i++) {
            speedEnemys[i] = 1 + rand() % 1;
        }
    dibujar_matriz2();
    while (1) {
        int kb;
        apartadoInGame(vida, nrondas);
        mainCharacter(xP, yP);
        if (kbhit()) {
            kb = getch();
            if (kb == 72) {
                if (yP != limiteY1) {
                    borrarCharacter(xP, yP);
                    yP--;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 75) {
                if (xP != limiteX1) {
                    borrarCharacter(xP, yP);
                    xP--;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 80) {
                if (yP != limiteY2) {
                    borrarCharacter(xP, yP);
                    yP++;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 77) {
                if (xP != limiteX2) {
                    borrarCharacter(xP, yP);
                    xP++;
                    mainCharacter(xP, yP);
                }
            }

        }
        if (speedEnemigo) {
            borrarEnemigo1(enemyX[0], enemyY[0]);
            enemyX[0] += speedEnemys[0];

        }
        if (enemyX[0] == 63 || enemyX[0] == 62 || speedEnemigo == false) {
            borrarEnemigo1(enemyX[0], enemyY[0]);
            speedEnemigo = false;
            enemyX[0] -= speedEnemys[0];

        }
        enemigo1(enemyX[0], enemyY[0]);
        if (enemyX[0] == 5 || enemyX[0] == 6) {
            speedEnemigo = true;
        }
        //
        if (speedEnemigo1) {
            borrarEnemigo1(enemyX[1], enemyY[1]);
            enemyX[1] += speedEnemys[1];

        }
        if (enemyX[1] == 63 || enemyX[1] == 62 || speedEnemigo1 == false) {
            borrarEnemigo1(enemyX[1], enemyY[1]);
            speedEnemigo1 = false;
            enemyX[1] -= speedEnemys[1];

        }
        enemigo1(enemyX[1], enemyY[1]);
        if (enemyX[1] == 5 || enemyX[1] == 6) {
            speedEnemigo1 = true;
        }
        //
        if (speedEnemigo2) {
            borrarEnemigo1(enemyX[2], enemyY[2]);
            enemyX[2] += speedEnemys[2];

        }
        if (enemyX[2] == 63 || enemyX[2] == 62 || speedEnemigo2 == false) {
            borrarEnemigo1(enemyX[2], enemyY[2]);
            speedEnemigo2 = false;
            enemyX[2] -= speedEnemys[2];

        }
        enemigo1(enemyX[2], enemyY[2]);
        if (enemyX[2] == 5 || enemyX[2] == 6) {
            speedEnemigo2 = true;
        }
        //
        if (speedEnemigo3) {
            borrarEnemigo1(enemyX[3], enemyY[3]);
            enemyX[3] += speedEnemys[3];

        }
        if (enemyX[3] == 63 || enemyX[3] == 62 || speedEnemigo3 == false) {
            borrarEnemigo1(enemyX[3], enemyY[3]);
            speedEnemigo3 = false;
            enemyX[3] -= speedEnemys[3];

        }
        enemigo1(enemyX[3], enemyY[3]);
        if (enemyX[3] == 5 || enemyX[3] == 6) {
            speedEnemigo3 = true;
        }
        //
        if (xP + 1 == enemyX[0] && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[0] && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP + 4 == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP + 4 == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP + 4 == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[0] && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP + 2 == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP + 2 == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP + 2 == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP + 4 == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP + 4 == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP + 4 == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP + 2 == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP + 2 == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP + 2 == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP == enemyY[2] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP + 4 == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP + 4 == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP + 4 == enemyY[2] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP + 2 == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP + 2 == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP + 2 == enemyY[2] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        //
        if (xP + 1 == enemyX[3] && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[3] && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP + 4 == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP + 4 == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP + 4 == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[3] && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP + 2 == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP + 2 == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP + 2 == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (yP == 3 || nrondas == 2 && yP == 6) {
            borrarCharacter(xP, yP);
            xP = 34;
            yP = 42;
            nrondas++;
            for (int i = 0; i <= 3; i++) {
                speedEnemys[i] = 1 + rand() % 2;
            }
        }
        if (nrondas == 1) {
            aliado1(10, 32);
            if (vidaex == false) borraraliado(10, 32);
        }
        if (nrondas == 1) {
            aliado1(23, 12);
            if (vidaex1 == false) borraraliado(23, 12);
        }
        if (vidaex == true && nrondas == 1) {
            if (xP == 13 && yP + 3 == 33) {
                vidaExtra(8, 31);
                vida++;
                vidaex = false;
            }
        }
        if (vidaex1 == true && nrondas == 1) {
            if (xP == 23 && yP + 3 == 13) {
                vidaExtra(21, 10);
                vida++;
                vidaex1 = false;
            }
        }
        if (nrondas == 2) {
            ninosAfricanos(31, 4);
            ninosAfricanos(35, 4);
        }
        if (nrondas == 3) {
            system("cls");
            ganaste = true;
            break;

        }
        _sleep(25);
    }
    int pressz;
    if (perdiste) {
        while (1) {
            youlost();
            if (kbhit()) {
                pressz = getch();
                if (pressz == 'Z' || pressz == 'z') {
                    perdiste = false;
                    nivel2lose = true;
                    break;
                }
            }
        }
    }
    if (ganaste) {
        while (1) {
            youwin();
            if (kbhit()) {
                pressz = getch();
                if (pressz == 'Z' || pressz == 'z') {
                    nivel1win = true;
                    ganaste = false;
                    break;
                }
            }
        }
    }
}
void nivel3() {
    dibujar_matriz();
    srand(time(0));
    int speedEnemys[5];
    int enemyX[5] = { 5,5,5,5,5 }, enemyY[5] = { 35,25,15,7,20 };
    int limiteX1 = 5, limiteY1 = 3;
    int limiteX2 = 66, limiteY2 = 43;
    int vida = 2;
    int xP = 34, yP = 42;
    int nrondas = 0;
    bool vidaex = true, vidaex1 = true;
    bool speedEnemigo = true, speedEnemigo1 = true, speedEnemigo2 = true, speedEnemigo3 = true, speedEnemigo4 = true;
    bool perdiste = false;
    bool ganaste = false;
    limitesNiveles();
    for (int i = 0; i <= 4; i++) {
        speedEnemys[i] = 1 + rand() % 1;
    }
    dibujar_matriz3();
    while (1) {

        int kb;
        apartadoInGame(vida, nrondas);
        mainCharacter(xP, yP);
        if (kbhit()) {
            kb = getch();
            if (kb == 72) {
                if (yP != limiteY1) {
                    borrarCharacter(xP, yP);
                    yP--;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 75) {
                if (xP != limiteX1) {
                    borrarCharacter(xP, yP);
                    xP--;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 80) {
                if (yP != limiteY2) {
                    borrarCharacter(xP, yP);
                    yP++;
                    mainCharacter(xP, yP);
                }
            }
            if (kb == 77) {
                if (xP != limiteX2) {
                    borrarCharacter(xP, yP);
                    xP++;
                    mainCharacter(xP, yP);
                }
            }

        }
        if (speedEnemigo) {
            borrarEnemigo1(enemyX[0], enemyY[0]);
            enemyX[0] += speedEnemys[0];

        }
        if (enemyX[0] == 63 || enemyX[0] == 62 || enemyX[0] == 64 || speedEnemigo == false) {
            borrarEnemigo1(enemyX[0], enemyY[0]);
            speedEnemigo = false;
            enemyX[0] -= speedEnemys[0];

        }
        enemigo1(enemyX[0], enemyY[0]);
        if (enemyX[0] == 5 || enemyX[0] == 6 || enemyX[0] == 7) {
            speedEnemigo = true;
        }
        //
        if (speedEnemigo1) {
            borrarEnemigo1(enemyX[1], enemyY[1]);
            enemyX[1] += 2;

        }
        if (enemyX[1] == 63 || enemyX[1] == 62 || enemyX[1] == 64 || speedEnemigo1 == false) {
            borrarEnemigo1(enemyX[1], enemyY[1]);
            speedEnemigo1 = false;
            enemyX[1] -= speedEnemys[1];

        }
        enemigo1(enemyX[1], enemyY[1]);
        if (enemyX[1] == 5 || enemyX[1] == 6 || enemyX[1] == 7) {
            speedEnemigo1 = true;
        }
        //
        if (speedEnemigo2) {
            borrarEnemigo1(enemyX[2], enemyY[2]);
            enemyX[2] += speedEnemys[2];

        }
        if (enemyX[2] == 63 || enemyX[2] == 62 || enemyX[2] == 64 || speedEnemigo2 == false) {
            borrarEnemigo1(enemyX[2], enemyY[2]);
            speedEnemigo2 = false;
            enemyX[2] -= speedEnemys[2];

        }
        enemigo1(enemyX[2], enemyY[2]);
        if (enemyX[2] == 5 || enemyX[2] == 6 || enemyX[2] == 7) {
            speedEnemigo2 = true;
        }
        //
        if (speedEnemigo3) {
            borrarEnemigo1(enemyX[3], enemyY[3]);
            enemyX[3] += speedEnemys[3];

        }
        if (enemyX[3] == 63 || enemyX[3] == 62 || enemyX[3] == 64 || speedEnemigo3 == false) {
            borrarEnemigo1(enemyX[3], enemyY[3]);
            speedEnemigo3 = false;
            enemyX[3] -= speedEnemys[3];

        }
        enemigo1(enemyX[3], enemyY[3]);
        if (enemyX[3] == 5 || enemyX[3] == 6 || enemyX[2] == 7) {
            speedEnemigo3 = true;
        }
        //
        if (speedEnemigo4) {
            borrarEnemigo1(enemyX[4], enemyY[4]);
            enemyX[4] += speedEnemys[4];

        }
        if (enemyX[4] == 63 || enemyX[4] == 62 || enemyX[4] == 64 || speedEnemigo4 == false) {
            borrarEnemigo1(enemyX[4], enemyY[4]);
            speedEnemigo4 = false;
            enemyX[4] -= speedEnemys[4];

        }
        enemigo1(enemyX[4], enemyY[4]);
        if (enemyX[4] == 5 || enemyX[4] == 7 || enemyX[4] == 6) {
            speedEnemigo4 = true;
        }

        //
        if (xP + 1 == enemyX[0] && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[0] && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP + 4 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP + 4 == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP + 4 == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP + 4 == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[0] && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 3 && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 1 && yP + 2 == enemyY[0] + 2 || xP + 1 == enemyX[0] + 2 && yP + 2 == enemyY[0] || xP + 1 == enemyX[0] + 4 && yP + 2 == enemyY[0] || xP + 1 == enemyX[0] + 3 && yP + 2 == enemyY[0] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP + 4 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP + 4 == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP + 4 == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP + 4 == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[1] && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 3 && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 1 && yP + 2 == enemyY[1] + 2 || xP + 1 == enemyX[1] + 2 && yP + 2 == enemyY[1] || xP + 1 == enemyX[1] + 4 && yP + 2 == enemyY[1] || xP + 1 == enemyX[1] + 3 && yP + 2 == enemyY[1] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP == enemyY[2] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP + 4 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP + 4 == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP + 4 == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP + 4 == enemyY[2] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[2] && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 3 && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 1 && yP + 2 == enemyY[2] + 2 || xP + 1 == enemyX[2] + 2 && yP + 2 == enemyY[2] || xP + 1 == enemyX[2] + 4 && yP + 2 == enemyY[2] || xP + 1 == enemyX[2] + 3 && yP + 2 == enemyY[2] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        //
        if (xP + 1 == enemyX[3] && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[3] && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP + 4 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP + 4 == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP + 4 == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP + 4 == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[3] && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 3 && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 1 && yP + 2 == enemyY[3] + 2 || xP + 1 == enemyX[3] + 2 && yP + 2 == enemyY[3] || xP + 1 == enemyX[3] + 4 && yP + 2 == enemyY[3] || xP + 1 == enemyX[3] + 3 && yP + 2 == enemyY[3] + 1) {
            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[4] && yP == enemyY[4] + 2 || xP + 1 == enemyX[4] + 3 && yP == enemyY[4] + 2 || xP + 1 == enemyX[4] + 1 && yP == enemyY[4] + 2 || xP + 1 == enemyX[4] + 2 && yP == enemyY[4] || xP + 1 == enemyX[4] + 4 && yP == enemyY[4] || xP + 1 == enemyX[4] + 3 && yP == enemyY[4] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[4] && yP + 4 == enemyY[4] + 2 || xP + 1 == enemyX[4] + 3 && yP + 4 == enemyY[4] + 2 || xP + 1 == enemyX[4] + 1 && yP + 4 == enemyY[4] + 2 || xP + 1 == enemyX[4] + 2 && yP + 4 == enemyY[4] || xP + 1 == enemyX[4] + 4 && yP + 4 == enemyY[4] || xP + 1 == enemyX[4] + 3 && yP + 4 == enemyY[4] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }
        }
        if (xP + 1 == enemyX[4] && yP + 2 == enemyY[4] + 2 || xP + 1 == enemyX[4] + 3 && yP + 2 == enemyY[4] + 2 || xP + 1 == enemyX[4] + 1 && yP + 2 == enemyY[4] + 2 || xP + 1 == enemyX[4] + 2 && yP + 2 == enemyY[4] || xP + 1 == enemyX[4] + 4 && yP + 2 == enemyY[4] || xP + 1 == enemyX[4] + 3 && yP + 2 == enemyY[4] + 1) {

            if (vida == 0) {
                system("cls");
                perdiste = true;
                break;
            }
            else {
                borrarCharacter(xP, yP);
                xP = 34;
                yP = 42;
                vida--;
            }

        }
        if (yP == 3 || nrondas == 2 && yP == 6) {
            borrarCharacter(xP, yP);
            xP = 34;
            yP = 42;
            nrondas++;
            for (int i = 0; i <= 4; i++) {
                speedEnemys[i] = 1 + rand() % 3;
            }
        }
        if (nrondas == 1) {
            aliado1(10, 32);
            if (vidaex == false) borraraliado(10, 32);
        }
        if (nrondas == 1) {
            aliado1(23, 12);
            if (vidaex1 == false) borraraliado(10, 32);
        }
        if (vidaex == true && nrondas == 1) {
            if (xP == 13 && yP + 3 == 33) {
                vidaExtra(8, 31);
                vida++;
                vidaex = false;
            }
        }
        if (vidaex1 == true && nrondas == 1) {
            if (xP == 23 && yP + 3 == 13) {
                vidaExtra(21, 10);
                vida++;
                vidaex1 = false;
            }
        }
        if (nrondas == 2) {
            ninosAfricanos(31, 4);
            ninosAfricanos(35, 4);
        }
        if (nrondas == 3) {
            system("cls");
            youwin();
            getch();
            break;

        }
        _sleep(25);

    }
    int pressz;
    if (perdiste) {
        while (1) {
            youlost();
            if (kbhit()) {
                pressz = getch();
                if (pressz == 'Z' || pressz == 'z') {
                    perdiste = false;
                    nivel3lose = true;
                    break;
                }
            }
        }
    }
    if (ganaste) {
        while (1) {
            youwin();
            if (kbhit()) {
                pressz = getch();
                if (pressz == 'Z' || pressz == 'z') {
                    nivel3win = true;
                    ganaste = false;
                    break;
                }
            }
        }
    }
}
int main()
{
    Logo_Upc();
    system("cls");
    menu();
    return 0;
}